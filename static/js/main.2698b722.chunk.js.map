{"version":3,"sources":["types.ts","store/theme/index.ts","store/app/index.ts","store/theme/init.ts","store/dictionary/index.ts","store/dictionary/init.ts","store/result/index.ts","store/result/init.ts","components/TopMenu.tsx","images/floppa.png","components/Floppa.tsx","components/Inputs.tsx","components/App.tsx","reportWebVitals.ts","index.tsx","components/App.module.css","components/Floppa.module.css"],"names":["DictionaryWordPosition","Theme","THEME_STORAGE_KEY","$theme","createStore","light","$isDark","map","theme","dark","toggleTheme","createEvent","saveThemeFx","createEffect","loadThemeFx","AppGate","createGate","on","sample","clock","updates","source","target","use","ls","forward","from","open","to","doneData","_","DICTIONARY_STORAGE_KEY","$dictionary","handleChangeWord","handleAddNewRow","handleRemoveRow","handleResetDictionary","addNewRowFx","removeRowFx","saveDictionaryFx","loadDictionaryFx","$isResetConfirmationOpen","openResetConfirmation","closeResetConfirmation","fn","dictionary","id","nanoid","pair","filter","row","position","value","right","Error","reset","$isResultOverlayOpen","openResultOverlay","closeResultOverlay","mapDictionaryToCSVFx","$csv","d","join","csv","TopMenu","isDark","useStore","isResetConfirmationOpen","isResultOverlayOpen","Group","align","Alignment","LEFT","Heading","RIGHT","className","icon","intent","Intent","PRIMARY","onClick","DANGER","clsx","Classes","DARK","cancelButtonText","confirmButtonText","isOpen","onCancel","onConfirm","canEscapeKeyCancel","onClose","DIALOG_BODY","fill","rows","readOnly","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","outlined","Floppa","styles","root","src","floppa","alt","image","Inputs","useHotkeys","combo","label","global","preventDefault","onKeyDown","handleKeyDown","handleKeyUp","length","onKeyUp","text","large","onChange","e","left","minimal","App","useGate","container","menu","inputs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2698b722.chunk.js","sourcesContent":["// dictionary\nexport enum DictionaryWordPosition {\n  left = 0,\n  right = 1\n}\nexport type DictionaryPair = [string, string];\nexport type DictionaryRow = { id: string; pair: DictionaryPair };\n\n// theme\nexport enum Theme {\n  dark = \"dark\",\n  light = \"light\",\n}\n","import { createEffect, createEvent, createStore } from 'effector';\nimport React from 'react';\nimport { Theme } from '../../types';\n\nexport const THEME_STORAGE_KEY = 'theme';\n\nexport const $theme = createStore<Theme>(Theme.light);\nexport const $isDark = $theme.map(theme => theme === Theme.dark);\n\nexport const toggleTheme = createEvent<React.SyntheticEvent>();\n\nexport const saveThemeFx = createEffect<Theme, void>();\nexport const loadThemeFx = createEffect<void, Theme>();","import { createGate } from \"effector-react\";\n\nexport const AppGate = createGate();","import { sample, forward } from \"effector\";\nimport * as ls from \"local-storage\";\nimport { $theme, loadThemeFx, saveThemeFx, THEME_STORAGE_KEY, toggleTheme } from \".\";\nimport { Theme } from \"../../types\";\nimport { AppGate } from \"../app\";\n\n$theme.on(toggleTheme, theme => theme === Theme.dark ? Theme.light : Theme.dark);\n\nsample({\n  clock: $theme.updates,\n  source: $theme,\n  target: saveThemeFx\n});\n\nsaveThemeFx.use((theme) => {\n  ls.set<Theme>(THEME_STORAGE_KEY, theme);\n});\n\nforward({\n  from: AppGate.open,\n  to: loadThemeFx\n})\n\nloadThemeFx.use(() => {\n  const theme = ls.get<Theme>(THEME_STORAGE_KEY);\n\n  return theme;\n});\n\n$theme.on(loadThemeFx.doneData, (_, theme) => theme);","import { createEffect, createEvent, createStore } from \"effector\";\nimport * as React from \"react\";\nimport { DictionaryRow, DictionaryWordPosition } from \"../../types\";\n\nexport const DICTIONARY_STORAGE_KEY = \"dictionary\";\n\nexport const $dictionary = createStore<DictionaryRow[]>([]);\n\nexport const handleChangeWord = createEvent<{\n  id: DictionaryRow[\"id\"];\n  position: DictionaryWordPosition;\n  value: string;\n}>();\n\nexport const handleAddNewRow = createEvent<React.SyntheticEvent | void>();\nexport const handleRemoveRow = createEvent<DictionaryRow[\"id\"]>();\nexport const handleResetDictionary = createEvent<React.SyntheticEvent | void>();\n\nexport const addNewRowFx = createEffect<\n  { dictionary: DictionaryRow[] },\n  DictionaryRow[]\n>();\nexport const removeRowFx = createEffect<\n  { dictionary: DictionaryRow[]; id: DictionaryRow[\"id\"] },\n  DictionaryRow[]\n>();\n\nexport const saveDictionaryFx = createEffect<DictionaryRow[], void>();\nexport const loadDictionaryFx = createEffect<void, DictionaryRow[]>();\n\nexport const $isResetConfirmationOpen = createStore<boolean>(false);\nexport const openResetConfirmation = createEvent<React.SyntheticEvent | void>();\nexport const closeResetConfirmation = createEvent<React.SyntheticEvent | void>();\n","import { forward, sample } from \"effector\";\nimport { nanoid } from \"nanoid\";\nimport * as ls from \"local-storage\";\nimport {\n  $dictionary,\n  $isResetConfirmationOpen,\n  addNewRowFx,\n  closeResetConfirmation,\n  DICTIONARY_STORAGE_KEY,\n  handleAddNewRow,\n  handleChangeWord,\n  handleRemoveRow,\n  handleResetDictionary,\n  loadDictionaryFx,\n  openResetConfirmation,\n  removeRowFx,\n  saveDictionaryFx,\n} from \".\";\nimport {\n  DictionaryPair,\n  DictionaryRow,\n  DictionaryWordPosition,\n} from \"../../types\";\nimport { AppGate } from \"../app\";\n\nsample({\n  clock: handleAddNewRow,\n  source: $dictionary,\n  fn: (dictionary) => ({ dictionary }),\n  target: addNewRowFx,\n});\n\naddNewRowFx.use(({ dictionary }) => {\n  const id = nanoid();\n  return [...dictionary, { id, pair: [\"\", \"\"] }];\n});\n\n$dictionary.on(addNewRowFx.doneData, (_, dictionary) => dictionary);\n\nsample({\n  clock: handleRemoveRow,\n  source: $dictionary,\n  fn: (dictionary, id) => ({ dictionary, id }),\n  target: removeRowFx,\n});\n\nremoveRowFx.use(({ dictionary, id }) => {\n  return dictionary.filter((row) => row.id !== id);\n});\n\n$dictionary.on(removeRowFx.doneData, (_, dictionary) => dictionary);\n\n$dictionary.on(handleChangeWord, (dictionary, { id, position, value }) => {\n  const newDictionary: DictionaryRow[] = dictionary.map((row) => {\n    if (row.id !== id) return row;\n\n    const pair: DictionaryPair =\n      position === DictionaryWordPosition.right\n        ? [row.pair[0], value]\n        : [value, row.pair[1]];\n\n    return { id: row.id, pair };\n  });\n\n  return newDictionary;\n});\n\nforward({\n  from: AppGate.open,\n  to: loadDictionaryFx,\n});\n\nloadDictionaryFx.use(() => {\n  const dictionary = ls.get<DictionaryRow[]>(DICTIONARY_STORAGE_KEY);\n\n  if (!dictionary) throw new Error(\"Cannot load dictionary\");\n  return dictionary;\n});\n\n$dictionary.on(loadDictionaryFx.doneData, (_, dictionary) => dictionary);\n\nsample({\n  clock: $dictionary.updates,\n  source: $dictionary,\n  target: saveDictionaryFx,\n});\n\nsaveDictionaryFx.use((dictionary) => {\n  ls.set<DictionaryRow[]>(DICTIONARY_STORAGE_KEY, dictionary);\n});\n\n$isResetConfirmationOpen\n  .on(openResetConfirmation, () => true)\n  .reset(closeResetConfirmation);\n\n$dictionary.reset(handleResetDictionary);\n","import { createStore, createEvent, createEffect } from \"effector\";\nimport * as React from \"react\";\nimport { DictionaryRow } from \"../../types\";\n\nexport const $isResultOverlayOpen = createStore<boolean>(false);\nexport const openResultOverlay = createEvent<React.SyntheticEvent | void>();\nexport const closeResultOverlay = createEvent<React.SyntheticEvent | void>();\n\nexport const mapDictionaryToCSVFx = createEffect<DictionaryRow[], string>();\nexport const $csv = createStore<string>(\"\");\n","import { sample } from \"effector\";\nimport { $csv, $isResultOverlayOpen, closeResultOverlay, mapDictionaryToCSVFx, openResultOverlay } from \".\";\nimport { $dictionary } from \"../dictionary\";\n\n$isResultOverlayOpen\n  .on(openResultOverlay, () => true)\n  .reset(closeResultOverlay);\n\nsample({\n  clock: openResultOverlay,\n  source: $dictionary,\n  target: mapDictionaryToCSVFx\n})\n\nmapDictionaryToCSVFx.use((dictionary) => {\n  const string = dictionary.map((d) => {\n    if (d.pair[0] && d.pair[1]) {\n      return `\"${d.pair[0]}\";\"${d.pair[1]}\"\\n`;\n    }\n\n    return null;\n  });\n\n  return string.join(\"\");\n});\n\n$csv.on(mapDictionaryToCSVFx.doneData, (_, csv) => csv);","import * as React from \"react\";\nimport {\n  Navbar,\n  Button,\n  Alignment,\n  Intent,\n  Alert,\n  Classes,\n  Dialog,\n  TextArea,\n  H5,\n} from \"@blueprintjs/core\";\nimport { useStore } from \"effector-react\";\nimport { $isDark, toggleTheme } from \"../store/theme\";\nimport {\n  $isResetConfirmationOpen,\n  closeResetConfirmation,\n  handleResetDictionary,\n  openResetConfirmation,\n} from \"../store/dictionary\";\nimport clsx from \"clsx\";\nimport {\n  $csv,\n  $isResultOverlayOpen,\n  closeResultOverlay,\n  openResultOverlay,\n} from \"../store/result\";\n\nexport const TopMenu: React.FC = () => {\n  const isDark = useStore($isDark);\n  const isResetConfirmationOpen = useStore($isResetConfirmationOpen);\n  const isResultOverlayOpen = useStore($isResultOverlayOpen);\n  const csv = useStore($csv);\n\n  return (\n    <>\n      <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>Stasi learns Deutsch</Navbar.Heading>\n        </Navbar.Group>\n\n        <Navbar.Group align={Alignment.RIGHT}>\n          <Button\n            className=\"bp3-minimal\"\n            icon=\"function\"\n            intent={Intent.PRIMARY}\n            onClick={openResultOverlay}\n          />\n          <Button\n            className=\"bp3-minimal\"\n            icon=\"trash\"\n            intent={Intent.DANGER}\n            onClick={openResetConfirmation}\n          />\n          <Button\n            className=\"bp3-minimal\"\n            icon={isDark ? \"lightbulb\" : \"moon\"}\n            onClick={toggleTheme}\n          />\n        </Navbar.Group>\n      </Navbar>\n\n      <Alert\n        className={clsx(isDark && Classes.DARK)}\n        cancelButtonText=\"Cancel\"\n        confirmButtonText=\"Delete\"\n        icon=\"trash\"\n        intent={Intent.DANGER}\n        isOpen={isResetConfirmationOpen}\n        onCancel={closeResetConfirmation}\n        onConfirm={() => {\n          handleResetDictionary();\n          closeResetConfirmation();\n        }}\n        canEscapeKeyCancel\n      >\n        <p>\n          Nastya, are you sure you want to delete <b>everything</b>? You will\n          not be able to restore the dictionary later\n        </p>\n      </Alert>\n\n      <Dialog isOpen={isResultOverlayOpen} onClose={closeResultOverlay}>\n        <div className={Classes.DIALOG_BODY}>\n          <H5>CSV result</H5>\n          <TextArea fill rows={10} readOnly value={csv} />\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button onClick={closeResultOverlay} outlined>\n              Close\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/floppa.fb28375b.png\";","import { H5 } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport floppa from \"../images/floppa.png\";\nimport styles from \"./Floppa.module.css\";\n\nexport const Floppa: React.FC = () => {\n  return (\n    <div className={styles.root}>\n      <img src={floppa} alt=\"The Big Floppa\" className={styles.image} />\n\n      <H5>Big Floppa greets you, Nastya!</H5>\n      <div>\n        At the moment your dictionary is empty. Let's add a new line. Click the\n        button below or try CMD + A (a means add - easy to remember) shortcut\n        (you can hold to create a bunch of rows quickly)\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport {\n  FormGroup,\n  ControlGroup,\n  InputGroup,\n  Button,\n  Intent,\n  useHotkeys,\n} from \"@blueprintjs/core\";\nimport { useStore } from \"effector-react\";\nimport {\n  $dictionary,\n  handleAddNewRow,\n  handleChangeWord,\n  handleRemoveRow,\n} from \"../store/dictionary\";\nimport { DictionaryWordPosition } from \"../types\";\nimport { Floppa } from \"./Floppa\";\n\nexport const Inputs: React.FC = () => {\n  const dictionary = useStore($dictionary);\n  const { handleKeyDown, handleKeyUp } = useHotkeys([\n    {\n      combo: \"cmd+a\",\n      label: \"Add new row\",\n      global: true,\n      preventDefault: true,\n      onKeyDown: () => handleAddNewRow(),\n    },\n  ]);\n\n  if (dictionary.length < 1) {\n    return (\n      <>\n        <Floppa />\n\n        <FormGroup>\n          <ControlGroup fill>\n            <Button\n              onClick={handleAddNewRow}\n              onKeyDown={handleKeyDown}\n              onKeyUp={handleKeyUp}\n              icon=\"plus\"\n              text=\"Add new row (cmd + a)\"\n              large\n              intent={Intent.PRIMARY}\n            />\n          </ControlGroup>\n        </FormGroup>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {dictionary.map((row) => (\n        <FormGroup key={row.id}>\n          <ControlGroup fill>\n            <InputGroup\n              large\n              value={row.pair[0]}\n              onChange={(e) =>\n                handleChangeWord({\n                  id: row.id,\n                  value: e.target.value,\n                  position: DictionaryWordPosition.left,\n                })\n              }\n            />\n            <InputGroup\n              large\n              value={row.pair[1]}\n              onChange={(e) =>\n                handleChangeWord({\n                  id: row.id,\n                  value: e.target.value,\n                  position: DictionaryWordPosition.right,\n                })\n              }\n            />\n            <Button\n              icon=\"cross\"\n              outlined\n              intent={Intent.DANGER}\n              onClick={() => handleRemoveRow(row.id)}\n            />\n          </ControlGroup>\n        </FormGroup>\n      ))}\n\n      <FormGroup>\n        <ControlGroup fill>\n          <Button\n            onClick={handleAddNewRow}\n            onKeyDown={handleKeyDown}\n            onKeyUp={handleKeyUp}\n            icon=\"plus\"\n            text=\"Add new row (cmd + a)\"\n            large\n            minimal\n            intent={Intent.PRIMARY}\n          />\n        </ControlGroup>\n      </FormGroup>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { useGate, useStore } from \"effector-react\";\nimport clsx from \"clsx\";\nimport { Classes } from \"@blueprintjs/core\";\nimport styles from \"./App.module.css\";\n\nimport { TopMenu } from \"./TopMenu\";\nimport { Inputs } from \"./Inputs\";\nimport { $isDark } from \"../store/theme\";\nimport { AppGate } from \"../store/app\";\n\nexport const App: React.FC = () => {\n  useGate(AppGate);\n  const isDark = useStore($isDark);\n\n  return (\n    <div className={clsx(styles.root, isDark ? styles.dark : styles.light)}>\n      <div className={clsx(styles.container, isDark && Classes.DARK)}>\n        <div className={styles.menu}>\n          <TopMenu />\n        </div>\n\n        <div className={styles.inputs}>\n          <Inputs />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport './index.css';\n\nimport \"./store/init\";\n\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1Ylx4\",\"dark\":\"App_dark__1qI-h\",\"light\":\"App_light__3RWIn\",\"container\":\"App_container__6j1zw\",\"menu\":\"App_menu__3Q_vY\",\"inputs\":\"App_inputs__2Es-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Floppa_root__158g_\",\"image\":\"Floppa_image__1hP9p\"};"],"sourceRoot":""}